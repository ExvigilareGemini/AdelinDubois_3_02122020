@mixin section_creation($box_param_mixin) {
  @each $section, $param in $box_param_mixin {
    .#{$section} {
      height: map-get($map: $param, $key: param_height);
      background-color: map-get($map: $param, $key: param_color);
      margin: map-get($map: $param, $key: param_margin);
    }
  }
}

// Centrage des enfants avec flexbox -> flex-direction : column
@mixin flex_centered_column {
  display: flex;
  flex-direction: column;
  align-items: center;
}

// Centrage des enfants avec flexbox -> flex-direction : row
@mixin flex_centered_row {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Centrage avec flex_centered_column + alignement du titre à gauche
@mixin flex_centered_HeadLeft {
  @include flex_centered_column;
  justify-content: space-evenly;
  &__head {
    width: 95%;
  }
} 

// Centrage avec flex_centered_row + alignement du titre à gauche
@mixin flex_wrapping {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-evenly;
} 

// Création d'un cadre limitant la taille d'une image à contenir pour affichage (pin, preview,...)
@mixin cadre ($height: 100%, $width: 100%) {
  overflow: hidden;
  height: $height;
  width: $width;
}

// Utilisé avec la mixin cadre (ci dessus) en tant que container
// Réajustement de l'image au cadre
@mixin objet_fit {
  object-fit: cover;
  width: inherit;
  height: inherit;
}

@mixin shadow ($version: 0) {
  // bordure supérieure partie localisation et fonctionnement (format tablete)
  @if $version == 1 {
    box-shadow: 0px 3px 3px 0px rgba(0,0,0,0.1) inset;
  }
  // ombre bouton plus sombre
  @else if $version == 2 {
    box-shadow: 0 5px 5px rgba(0, 0, 0, 1);
  }
  // ombre de base -> bouton, steps, pins, plats
  @else {
    box-shadow: 0 5px 8px rgba(0, 0, 0, 0.2);
  }
}

@mixin tablet_format {
  @media screen and (min-width: map-get($map: $breakpoints, $key: tablet)) and (max-width: map-get($map: $breakpoints, $key: desktop)) {
    @content;
  }
}

@mixin desktop_format {
  @media screen and (min-width: map-get($map: $breakpoints, $key: desktop)){
    @content;    
  }
}

// Boucle d'application des animations sur chacun des plats avec un delay grandissant
// NbrMaxDePlats est le nombre maximum de plats présent dans un menu (entrée, plat, dessert) parmis toutes les pages de restaurants, afin de créer une boucle qui contiendra tous les plats possile
@mixin Appli_Anim_Plats ($NbrMaxDePlats : 1) {
  @for $i from 1 through $NbrMaxDePlats {
    // nth-child + 2 car la premier plat réagit au sélécteur nth-child(3)
    &:nth-child(#{$i+2}) {
      animation: ApparitionPlats $time_app_plats $i*$delai_app_plats forwards;
    }
  }
}